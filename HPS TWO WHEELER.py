# -*- coding: utf-8 -*-
"""HPS EV TWO WHEELER

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oHv_Zux_Jdss935pEiDBsVqon1VqrxwN
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from google.colab import files
import warnings
warnings.filterwarnings("ignore")

# Upload your dataset
uploaded = files.upload()  # Upload "EV_Health_Score_Test_Dataset.xlsx"

# Load and clean
df = pd.read_excel("EV_Health_Score_Test_Dataset.xlsx")
df = df.loc[:, ~df.columns.str.contains('^Unnamed')]  # Remove Unnamed:0 if present

# Generate health score using your formula
df['new_health_score'] = (
    0.30 * 100 +
    0.08 * (100 - df['battery_discharge_percentage']) +
    0.07 * df['regenerative_braking_kwh'] +
    0.06 * (40 - abs(df['average_battery_temperature_celsius'] - 35)) +
    0.04 * (40 - abs(df['max_battery_temperature_celsius'] - 35)) +
    0.05 * (70 - abs(df['average_motor_temperature_celsius'] - 60)) +
    0.04 * (80 - abs(df['max_motor_temperature_celsius'] - 60)) +
    0.05 * (100 - df['trip_distance_km']) +
    0.03 * (360 - df['trip_duration_minutes']) +
    0.04 * (70 - df['average_speed_kmph']) +
    0.03 * (70 - df['max_speed_kmph']) +
    0.04 * (20 - df['number_of_hard_braking_events']) +
    0.03 * (20 - df['number_of_hard_acceleration_events']) +
    0.04 * (5000 - df['average_suspension_activity_index']) / 50 +
    0.03 * (50 - df['total_pothole_count']) +
    0.03 * df['terrain_score'] +
    0.02 * (1000 - df['total_elevation_gain_meters']) / 10 +
    0.02 * (150 - df['rider_weight_kg']) +
    0.01 * (50 - df['payload_weight_kg']) +
    0.01 * df['average_coefficient_of_friction_indicator'] * 100 +
    0.01 * (10 - df['braking_induced_speed_drops_per_km']) * 10 +
    0.01 * (35 - abs(df['ambient_temperature_celsius'] - 30)) +
    0.01 * (1 - df['precipitation_indicator']) * 100 +
    0.01 * (100 - abs(df['average_humidity_percentage'] - 50))
).clip(0, 100)

# Train the model
X = df.drop(columns=['new_health_score'])
y = df['new_health_score']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Save column order
feature_order = X.columns
print("✅ Model Trained Successfully")

def get_input_from_user():
    print("\n🔢 Enter EV Trip Data:")
    input_data = {
        'trip_distance_km': float(input("Trip distance (km): ")),
        'trip_duration_minutes': float(input("Trip duration (min): ")),
        'average_speed_kmph': float(input("Average speed (km/h): ")),
        'max_speed_kmph': float(input("Max speed (km/h, ≤70): ")),
        'battery_discharge_percentage': float(input("Battery discharge (%): ")),
        'regenerative_braking_kwh': float(input("Regenerative braking (kWh): ")),
        'rider_weight_kg': float(input("Rider weight (kg): ")),
        'payload_weight_kg': float(input("Payload weight (kg): ")),
        'average_motor_temperature_celsius': float(input("Avg motor temp (°C): ")),
        'max_motor_temperature_celsius': float(input("Max motor temp (°C): ")),
        'average_battery_temperature_celsius': float(input("Avg battery temp (°C): ")),
        'max_battery_temperature_celsius': float(input("Max battery temp (°C): ")),
        'terrain_score': float(input("Terrain score (0-100): ")),
        'average_suspension_activity_index': float(input("Suspension index: ")),
        'total_elevation_gain_meters': float(input("Elevation gain (m): ")),
        'total_pothole_count': int(input("Pothole count: ")),
        'average_coefficient_of_friction_indicator': float(input("Friction (0-1): ")),
        'braking_induced_speed_drops_per_km': float(input("Braking drops/km: ")),
        'number_of_hard_braking_events': int(input("Hard braking events: ")),
        'number_of_hard_acceleration_events': int(input("Hard acceleration events: ")),
        'ambient_temperature_celsius': float(input("Ambient temp (°C): ")),
        'precipitation_indicator': int(input("Precipitation (0 = Dry, 1 = Rain): ")),
        'average_humidity_percentage': float(input("Humidity (%): "))
    }
    return input_data

while True:
    input_data = get_input_from_user()
    input_df = pd.DataFrame([input_data])[feature_order]
    predicted_score = model.predict(input_df)[0]

    if predicted_score >= 85:
        category = "Excellent"
    elif predicted_score >= 70:
        category = "Good"
    elif predicted_score >= 55:
        category = "Degraded"
    elif predicted_score >= 30:
        category = "Poor"
    else:
        category = "Very Poor"

    print(f"\n✅ Predicted Health Score: {predicted_score:.2f}")
    print(f"🚦 Condition: {category}")

    if category in ["Degraded", "Poor", "Very Poor"]:
        print("\n⚠️ Health Impact Reasons:")
        if input_data['battery_discharge_percentage'] > 75:
            print(" - High battery discharge")
        if input_data['max_motor_temperature_celsius'] > 100:
            print(" - Motor overheating")
        if input_data['max_battery_temperature_celsius'] > 55:
            print(" - Battery temperature too high")
        if input_data['terrain_score'] < 40:
            print(" - Very rough terrain")
        if input_data['number_of_hard_braking_events'] > 10:
            print(" - Too much hard braking")
        if input_data['average_suspension_activity_index'] > 2500:
            print(" - Excessive suspension activity")

    again = input("\n🔁 Predict another trip? (yes/no): ").strip().lower()
    if again != 'yes':
        break